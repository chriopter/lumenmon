#!/bin/bash
# Development auto-setup that resets containers, registers agent, and launches TUI dashboard.
# Performs full reset, creates invite, registers agent with console, and opens interactive TUI.

# Step 1: Reset everything (same as dev/reset)
echo "🔄 Stopping containers..."
docker stop lumenmon-console lumenmon-agent 2>/dev/null || true
docker rm lumenmon-console lumenmon-agent 2>/dev/null || true

echo "🧹 Cleaning data..."
rm -rf agent/data/mqtt/* 2>/dev/null || true
rm -rf console/data/mqtt/passwd console/data/*.log 2>/dev/null || true
mkdir -p agent/data/mqtt console/data/mqtt

# Step 2: Start containers with rebuild
echo "🚀 Starting fresh..."
# Use Docker network hostname for internal communication
echo "CONSOLE_HOST=lumenmon-console" > console/.env
docker compose -f console/docker-compose.yml up -d --build

# Agent connects via Docker network at lumenmon-console:8884 (MQTT TLS)
# Both containers join the same "lumenmon-net" network and communicate internally
docker compose -f agent/docker-compose.yml up -d --build

# Step 3: Wait for console to be ready
echo "⏳ Waiting for console to be ready..."
sleep 3

# Step 4: Create invite and register agent
echo "🔑 Creating invite..."

# Generate invite for local agent (Docker network)
# Uses lumenmon-console:8884 for MQTT TLS connection
INVITE=$(docker exec lumenmon-console /app/core/enrollment/invite_create.sh 2>&1 | grep "lumenmon register" | sed 's/.*lumenmon register "\(.*\)"/\1/')
if [ -z "$INVITE" ]; then
    echo "❌ Failed to create invite"
    exit 1
fi
echo "   Invite: $INVITE"

echo "📝 Registering agent (auto-accepting certificate)..."
echo "yes" | docker exec -i lumenmon-agent /app/core/setup/register.sh "$INVITE"

# Restart agent to load credentials and start collectors
echo "🔄 Restarting agent to start collectors..."
docker restart lumenmon-agent >/dev/null

# Give agent a moment to connect
echo "⏳ Waiting for agent to connect..."
sleep 3

# Step 5: Launch TUI
echo "📊 Access WebTUI via http://localhost:8080/"
