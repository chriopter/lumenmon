name: Python Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort mypy
        cd server/app && pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: |
        black --check server/app/*.py
      continue-on-error: true
    
    - name: Check import sorting with isort
      run: |
        isort --check-only server/app/*.py
      continue-on-error: true
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 server/app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 server/app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Lint with pylint
      run: |
        pylint server/app/*.py --exit-zero
      continue-on-error: true
    
    - name: Type checking with mypy
      run: |
        mypy server/app/*.py --ignore-missing-imports
      continue-on-error: true

  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'  # Use latest stable Python
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd server/app && pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Test imports
      run: |
        python -c "import sys; sys.path.append('server/app'); import sink; import dashboard"
    
    - name: Check database initialization
      run: |
        cd server/app && python -c "
import os
import sqlite3
# Test database creation
DB_PATH = 'test.db'
conn = sqlite3.connect(DB_PATH)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS metrics (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    metric_name TEXT NOT NULL,
    metric_value REAL,
    metric_text TEXT,
    host TEXT DEFAULT 'localhost'
)''')
conn.commit()
conn.close()
os.remove(DB_PATH)
print('Database test passed')
"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'  # Use latest stable Python
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit
        cd server/app && pip install -r requirements.txt
    
    - name: Security check with Bandit
      run: |
        bandit -r server/app -f json -o bandit-report.json
        bandit -r server/app
      continue-on-error: true
    
    - name: Check for known vulnerabilities with Safety
      run: |
        cd server/app && safety check --json
      continue-on-error: true
    
    - name: Audit dependencies with pip-audit
      run: |
        cd server/app && pip-audit
      continue-on-error: true
    
    - name: Upload security results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: bandit-report.json

  docker:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build server Docker image
      run: |
        cd server && docker build -t lumenmon-server:test .
    
    - name: Build client Docker image
      run: |
        cd client && docker build -t lumenmon-client:test .
    
    - name: Test server container starts
      run: |
        docker run -d --name test-server -p 8080:8080 -p 8501:8501 lumenmon-server:test
        sleep 10
        docker logs test-server
        curl -f http://localhost:8080/metrics -X POST -d "test:1" || exit 1
        docker stop test-server
      continue-on-error: true
    
    - name: Container security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'lumenmon-server:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Upload Trivy results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true